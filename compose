package main
import( 
	"fmt"
)

var comb[] string=make([]string,36)

//C(m n) 长度
func length(m int,n int) int{
	d:=m-n+1
	facT:=fac(m,n,d)
	facN:=fac1(n)
	return facT/facN
	
}

func fac(m int,n int,d int) int{
	if m==d{
		return m
	}else{
		return fac(m-1,n,d)*m
	}
}

func fac1(n int) int{
	if n==1{
		return n
	}else{
		return fac1(n-1)*n
	}
}

func combination(src[]string,m int ,n int,d int){
	//a:=length(m,n)
	
	for i:=m;i >=n; i--{
		// 选择当前的头元素
		comb[n]=src[i-1]
		if n>1{
			//进入下一次更小的组合问题
			combination(src,i-1,n-1,d)
		}else{
			//满了需要的组合数，输出
			for j:=d;j>0;j--{
				fmt.Print(comb[j])
			}
			fmt.Print("  ")
		}
	}
}

func main(){
	//list := []string{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p",
	//"q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
	//combination(list,len(list),4,4)
	a:=length(36,4)
	fmt.Println(a)
	
}
